# 🧠 PERG Signal Classifier – ML & Deep Learning

## 🔬 Détection automatisée du signal PERG (Pattern Electroretinogram)

Ce projet simule un cas d’usage en **bioinformatique clinique** : l’analyse automatique de signaux PERG pour la détection d’anomalies associées à des atteintes précoces du nerf optique ou de la rétine (glaucome, neuropathies, etc.).

L’objectif est de comparer des modèles **Machine Learning (ML)** et **Deep Learning (DL)** pour un usage de **triage assisté par IA**.  
Il repose sur des signaux électrophysiologiques réels (dataset open source), en suivant les bonnes pratiques de traçabilité, reproductibilité, validation croisée et sélection de seuil.

---

## 🧪 Données utilisées

- **Source** : [PERG-IOBA – PhysioNet (2024)](https://physionet.org/content/perg-ioba-dataset/1.0.0/)
- **Format** : 279 signaux bruts (RE_1, LE_1), 300 Hz, + métadonnées cliniques (âge, sexe, diagnostic)
- **Ground truth** : Diagnostic binaire confirmé par ophtalmologiste (label = 0/1)
- **Distribution** : prévalence pathologique ≈ 2 % (réaliste, déséquilibrée)

---

## 🔎 Feature Engineering (ML)

Les modèles classiques utilisent des **features extraites manuellement** :

- Statistiques de base : moyenne, min, max, std
- Moments d’ordre supérieur : skewness, kurtosis
- Analyse fréquentielle : FFT (magnitude moyenne, max, énergie spectrale)
- Métadonnées : âge, sexe encodé

---

## ⚙️ Modélisation

### 🧠 Machine Learning :
- Modèles testés : `Logistic Regression`, `Decision Tree`, `Random Forest`, `XGBoost`
- Entrée : FFT + statistiques temporelles + métadonnées
- Validation croisée stratifiée (5-fold)
- Jeu de test :
  - ✅ **Équilibré (50/50)** : évaluation robuste
  - ✅ **Prévalence réelle (~2%)** : simulation réaliste

### 🤖 Deep Learning :
- Framework : TensorFlow / Keras
- Architecture : fully connected (Dense → Dropout → BatchNorm)
- Entrée :
  - **Concaténation** des signaux RE_1 + LE_1 (via FFT)
  - **Métadonnées** cliniques
- Optimisation :
  - `binary_crossentropy` + `AUC` en métrique
  - Sélection du **seuil optimal** selon :
    - 🎯 Sensibilité ≥ 0.8
    - 📊 F1-score maximal
    - 📈 Indice de Youden

---

## 📈 Résultats (test équilibré)

| Modèle              | AUC     | Sensibilité | Spécificité | F1-score | Accuracy | Seuil |
|---------------------|---------|-------------|-------------|----------|----------|--------|
| 🔹 Random Forest     | **0.768** | 0.818       | 0.591       | 0.735    | **0.705** | 0.46   |
| 🔸 Deep Learning     | 0.660   | **0.928**   | 0.333       | **0.765**| 0.673    | 0.45   |

### 📊 Rapport DL (seuil = 0.45)

- **Recall** : 92.9 %
- **Spécificité** : 33.3 %
- **Accuracy** : 67.3 %
- **F1-score** : 0.765  
- **Precision classe positive** : 65 %

---

## 🩺 Interprétation clinique

| Critère                | DL Model (RE/LE + meta)       | ML Model (Random Forest)     |
|------------------------|-------------------------------|-------------------------------|
| 🔬 Sensibilité         | ✅ Excellente (triage efficace) | Moyenne à bonne               |
| 📉 Spécificité         | Limite (faux positifs)         | Meilleure                     |
| 🧠 Interprétabilité     | Faible (DL boîte noire)        | Bonne (features cliniques)    |
| 🏥 Cas d’usage idéal   | Prétrisage automatique         | Dépistage général explicable  |

➡️ Le modèle DL est intéressant pour **maximiser la détection**, mais nécessite une **relecture humaine**.  
➡️ Le modèle RF est **plus stable** et **équilibré** pour un usage plus conservateur.

---

## 📊 Analyse des seuils (DL)

```text
Threshold  Sensibilité  Spécificité  F1-score   Accuracy
--------------------------------------------------------
0.10       1.0000       0.0000       0.7273     0.5714
0.20       1.0000       0.0476       0.7368     0.5918
0.30       0.9643       0.0476       0.7200     0.5714
0.40       0.9643       0.1905       0.7500     0.6327
0.45       0.9286       0.3333       0.7647     0.6735 ✅ (seuil retenu)
0.60       0.1071       0.9524       0.1875     0.4694
0.75+      0.0000       1.0000       0.0000     0.4286

✅ Bonnes pratiques bioinformatiques

| Pratique                                  | Implémentée |
| ----------------------------------------- | ----------- |
| 🧪 Validation croisée + test réaliste     | ✅           |
| 📊 Rapport complet (ROC, confusion, F1)   | ✅           |
| 📦 Fichiers reproductibles (.npy, .csv)   | ✅           |
| ⚖️ Class weights pour déséquilibre        | ✅           |
| 🔍 Analyse de seuils personnalisée        | ✅           |
| 📁 Versioning (git) & logs d’entraînement | ✅           |
| 📈 Visualisation TensorBoard              | ✅           |


⚠️ Limites & perspectives


❌ Pas de validation clinique externe

❌ Pas d’intégration temps réel (EHR, API PERG)

❌ Dataset limité en taille et diversité

❗ Spécificité faible pour le DL (risque d’over-referral)

🧭 Futures pistes :

Validation multicentrique prospective

Intégration interface web ou GUI clinique

Entraînement avec modèles séquentiels (e.g. CNN, LSTM)

Analyse des artefacts / qualité signal

📁 Références


PERG-IOBA – PhysioNet (2024)

FDA SaMD GMLP Guidelines (2021)

ISO 14971 – Risk Management in Medical Devices

Good practices in ML for Biomedical Signal Analysis

🛑 Avertissement


Ce dépôt est un projet de simulation bioinformatique à visée éducative.
Il ne constitue ni un dispositif médical certifié, ni un outil de diagnostic autonome.
Toute décision clinique doit être validée par un professionnel de santé.
